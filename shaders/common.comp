layout(binding = 0, rgba8) uniform image2D inout_image;

layout(push_constant) uniform PushConstantBlock 
{
	mat4 view_to_world_transform;
	uint progression_index; 
	float delta_time; 
} PushConstants;

//----------------------------------------------------------------------

const float TWO_PI = 6.283185307179586476925286766559f;
const float INF_DIST = 9999999999999999999.f;
const float RAY_START_BIAS = 1e-4; // Prevents self-intersection 

//----------------------------------------------------------------------

struct Ray
{
	vec3 origin;
	vec3 dir;
};

//----------------------------------------------------------------------
// Random number generators

// Pseudo-rng from https://blog.demofox.org/2020/05/25/casual-shadertoy-path-tracing-1-basic-camera-diffuse-emissive/
uint rng_state;
void init_rng()
{
	//rng_state = uint(dot(uvec3(gl_WorkGroupID.xy, PushConstants.progression_index), uvec3(1973, 9277, 26699))) | uint(1);
	rng_state = uint(dot(uvec3(gl_GlobalInvocationID.xy, PushConstants.progression_index), uvec3(1973, 9277, 26699))) | uint(1);
}

uint wang_hash(inout uint seed)
{
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float random_float_01(inout uint state)
{
    return float(wang_hash(state)) / 4294967296.0;
}

vec2 random_vec2_01(inout uint state)
{
    return vec2(random_float_01(state), random_float_01(state));
}

vec3 random_vec3_01(inout uint state)
{
    return vec3(random_float_01(state), random_float_01(state), random_float_01(state));
}
 
vec3 random_unit_vector(inout uint state)
{
    float z = random_float_01(state) * 2.0f - 1.0f;
    float a = random_float_01(state) * TWO_PI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

//----------------------------------------------------------------------

// Evaluates the R2 sequence described in
// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/
// Implementation inspired by https://www.pouet.net/topic.php?which=11501&page=1#c546333
vec2 eval_r2_sequence(uint sample_index)
{
	const float PLASTIC_CONSTANT = 1.32471795f;
	return fract(float(sample_index) * vec2(1.0 / PLASTIC_CONSTANT, 1.0 / (PLASTIC_CONSTANT * PLASTIC_CONSTANT)));
}

//----------------------------------------------------------------------

// Creates a primary ray through the specified pixel with the specified offset within it.
// Offset coefficents should be in interval [0, 1],
// 0.5 is the pixel center.
void make_primary_ray(ivec2 pixel_coords, vec2 offset, out Ray out_ray)
{
	// These could come from push constants or a uniform buffer.
	const vec2 screen_dims = vec2(imageSize(inout_image));
	const float eye_dist = 2;

	// The image plane will go from -1 to +1 in the x direction.
	// The y direction is proportional to x, scaled with the aspect ratio.

    vec2 float_pixel_coords = vec2(pixel_coords) - vec2(0.5) + offset;

	const float center_pixel_dx = (2 * float_pixel_coords.x + 1) / screen_dims.x - 1;
	const float center_pixel_dy = (screen_dims.y / screen_dims.x) * (2 * float_pixel_coords.y + 1 - screen_dims.y) / screen_dims.y;

	//out_ray.origin = vec3(0);
	//out_ray.dir = vec3(center_pixel_dx, center_pixel_dy, -eye_dist);
	out_ray.origin = (PushConstants.view_to_world_transform * vec4(0, 0, 0, 1)).xyz;
	out_ray.dir = (PushConstants.view_to_world_transform * vec4(center_pixel_dx, center_pixel_dy, -eye_dist, 0)).xyz;

    // For simple ray-sphere situations this is not necessary,
    // but later on it makes things easier.
    out_ray.dir = normalize(out_ray.dir);
}

//----------------------------------------------------------------------

// From Peter Shirley's RTIOW page 17.
float hit_sphere_shape(vec3 center, float radius, Ray r, float t_min, float t_max)
{
	vec3 oc = r.origin - center;
    float a = dot(r.dir, r.dir);
    float b = dot(oc, r.dir);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b*b - a*c;
    if (discriminant > 0) {
		float root = sqrt(b*b - a*c);
        float t = (-b - root) / a;
        if (t < t_max && t > t_min) {
			return t;
        }
        t = (-b + root) / a;
        if (t < t_max && t > t_min) {
			return t;
        }
    }
    return -1;
}


// ACES tone mapping curve fit to go from HDR to LDR
//https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
// Thanks, Alan Wolfe
vec3 aces_tone_mapping(vec3 x)
{
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;
    return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0.0f, 1.0f);
}


// Schlick aproximation to Fresnel coefficients
float compute_fresnel_reflect_amount(float n1, float n2, vec3 normal, vec3 incident, float f0, float f90)
{
        float r0 = (n1-n2) / (n1+n2);
        r0 *= r0;
        float cosX = -dot(normal, incident);
        if (n1 > n2)
        {
            float n = n1/n2;
            float sinT2 = n*n*(1.0-cosX*cosX);
            // Total internal reflection
            if (sinT2 > 1.0)
                return f90;
            cosX = sqrt(1.0-sinT2);
        }
        float x = 1.0-cosX;
        float ret = r0+(1.0-r0)*x*x*x*x*x;
 
        // adjust reflect multiplier for object reflectivity
        return mix(f0, f90, ret);
}

